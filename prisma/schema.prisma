// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscription  Subscription?
  notes         Note[]
  practicePapers PracticePaper[]
  textSummaries TextSummary[]
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planType        String   @default("FREE") // FREE, PREMIUM, PRO
  plan            String   @default("FREE") // For compatibility with new code
  isActive        Boolean  @default(true)
  startDate       DateTime @default(now())
  endDate         DateTime?
  quotaLimit      Int      @default(10)
  quotaUsed       Int      @default(0)
  validUntil      DateTime @default(dbgenerated("now() + interval '30 days'"))
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String
  subject     String?
  topic       String?
  prompt      String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PracticePage {
  id          String   @id @default(cuid())
  title       String
  content     String
  subject     String?
  topic       String?
  difficulty  String?  // EASY, MEDIUM, HARD
  prompt      String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PracticePaper {
  id        String   @id @default(cuid())
  title     String
  subject   String
  topic     String
  difficulty String
  content   String   @db.Text
  prompt    String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TextSummary {
  id                String   @id @default(cuid())
  originalTextLength Int
  summaryLength     Int
  style             String
  length            String
  storagePath       String?
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
